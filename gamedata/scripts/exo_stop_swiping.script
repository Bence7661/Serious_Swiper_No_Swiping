OldRemovePsu = item_exo_device.remove_psu
item_exo_device.remove_psu = function (obj)
    local id = obj:id()
    local data = item_exo_device.get_data(id)

    local sparePower = 0
    local batteriesToCreate = 0

    if not data or is_empty(data) then return end
    if not data.supply then return end
    if data.power > 100 then
        local powerToProcess = data.power - 100
        -- batteriesToCreate = math.ceil(powerToProcess / 100)
        batteriesToCreate = math.floor(powerToProcess / 100)
        sparePower = (powerToProcess % 100) / 100

        local batteryToDegrade = nil
        for i=1, batteriesToCreate do
            alife_create_item("batteries_exo", db.actor)
        end

        if sparePower > 0 then
            db.actor:iterate_inventory(function (_, obj)
                if obj:section() == "batteries_exo" then
                    local cond = obj:condition()
                    if cond < 1 and sparePower > 0 then
                        obj:set_condition(clamp(cond + sparePower, 0.01, 1))

                        sparePower = sparePower - (1 - cond)
                    end
                end
            end, db.actor)

            if sparePower >= 0.01 then
                batteryToDegrade = alife_create_item("batteries_exo", db.actor)
                CreateTimeEvent("exo_stop_swiping", "degradeBattery", 0.2, DegradeBattery, batteryToDegrade.id, sparePower)
            end
        end
        data.power = 100
    end

    alife_create_item(data.supply.name, db.actor)
    data.supply = nil
    item_exo_device.set_data(id, data)
end

function DegradeBattery(id, sparePower)
    local batteryToDegrade = get_object_by_id(id)

    if batteryToDegrade and sparePower then
        batteryToDegrade:set_condition(sparePower)
    end

    return true
end